def GUID = "f704"
def CLUSTER = "na39.openshift.opentlc.com"
def customSlavePod = "maven-appdev"
def customSlaveContainer = "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-slave-maven-appdev"
def APP="MLBParks"
def app="mlbparks"

// Jenkinsfile for MLBParks
podTemplate(label: customSlavePod
          , serviceAccount: 'jenkins'
          , cloud: 'openshift'
          , containers: [containerTemplate(
                          name: 'jnlp'
                        , image: customSlaveContainer
                        , workingDir: "/tmp"
                        , command: ''
                        , alwaysPullImage: false
                        , ttyEnabled: false
                        , args: '${computer.jnlpmac} ${computer.name}'
                        , resourceLimitCpu: '1000m'
                        , resourceLimitMemory: '2Gi'
                        , resourceRequestMemory: '1Gi')]
              ){
  node(customSlavePod) {

    def masterURL = "https://master.${CLUSTER}"
    // def token = 'string'   // add as parameter to build
    def mvnCmd = "mvn -s ./nexus_settings.xml -f ${APP}/pom.xml"
    def ocn = "oc -n ${GUID}-parks-dev"

    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"

    // Your Pipeline Code goes here. Make sure to use the ${GUID} and ${CLUSTER} parameters where appropriate
    // You need to build the application in directory `MLBParks`.
    // Also copy "../nexus_settings.xml" to your build directory
    // and replace 'GUID' in the file with your ${GUID} to point to >your< Nexus instance


    // Checkout Source Code
          stage('Checkout Source') {
              echo "Checking out source"
              checkout([
                    $class: 'GitSCM'
                  , branches: [[name: '*/master']]
                  , doGenerateSubmoduleConfigurations: false
                  , extensions: []
                  , submoduleCfg: []
                  , userRemoteConfigs: [[
                        url: 'https://github.com/mikecroft/openshift-appdev.git'
                        ]]
                  ])
          }

          // Extract version and other properties from the pom.xml
          def groupId    = getGroupIdFromPom("${APP}/pom.xml")
          def artifactId = getArtifactIdFromPom("${APP}/pom.xml")
          def version    = getVersionFromPom("${APP}/pom.xml")

          def devTag  = version + env.BUILD_ID
          def prodTag = version
          

          // Using Maven build the war file
          // Do not run tests in this step
          stage('Build war') {
            echo "Building version ${version}"
            // sh "${mvnCmd} -DskipTests install"
          }

          // Using Maven run the unit tests
          stage('Unit Tests') {
            echo "Running Unit Tests"
            // sh "${mvnCmd} test"
          }

          // Using Maven call SonarQube for Code Analysis
          stage('Code Analysis') {
            echo "Running Code Analysis"
            // sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube-${GUID}-sonarqube.apps.${CLUSTER}"
          }

          // Publish the built war file to Nexus
          stage('Publish to Nexus') {
            echo "Publish to Nexus"
            // sh "${mvnCmd} deploy deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3-${GUID}-nexus.apps.${CLUSTER}/repository/releases"
          }

          // Build the OpenShift Image in OpenShift and tag it.
          stage('Build and Tag OpenShift Image') {
            echo "Building OpenShift container image ${app}:${devTag}"
            // start build
            // sh "${ocn} start-build mlbparks --follow --from-file=./${APP}/target/mlbparks.jar"  
            
            // Use Nexus instead
            sh "${ocn} start-build mlbparks --follow --from-file=http://nexus3-f704-nexus.apps.na39.openshift.opentlc.com/repository/releases/com/openshift/evg/roadshow/mlbparks/1.0/mlbparks-1.0.jar"

            echo token            
            openshiftTag apiURL: masterURL, alias: 'false', authToken: token, destStream: app, destTag: "${devTag}", destinationnamespace: "${GUID}-parks-dev", namespace: "${GUID}-parks-dev", srcStream: app, srcTag: 'latest', verbose: 'false'
          }

          // Deploy the built image to the Development Environment.
          stage('Deploy to Dev') {
            echo "Deploying container image to Development Project"
            sh "oc set image dc/${app} ${app}=docker-registry.default.svc:5000/${GUID}-parks-dev/${app}:${devTag} -n ${GUID}-parks-dev"

            openshiftDeploy apiURL: masterURL, authToken: token, depCfg: app, namespace: "${GUID}-parks-dev"
            openshiftVerifyDeployment apiURL: masterURL, authToken: token, depCfg: app, namespace: "${GUID}-parks-dev", replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true'
            openshiftVerifyService apiURL: masterURL, authToken: token, namespace: "${GUID}-parks-dev", svcName: app, verbose: 'false'
          }

          // Run Integration Tests in the Development Environment.
          stage('Integration Tests') {
            // sleep 50

            // def route = "http://${app}-${GUID}-parks-dev.apps.muc.example.opentlc.com"
            // echo "Running Integration Tests"
            
            // sh "curl -u ${app}:redhat1 -H 'Content-Length: 0' -X POST ${route}/ws/${app}/my-task"
            
            // echo "set variables"
            // def check = sh(returnStdout: true, script: "curl -u '${app}:redhat1' -H \"Accept: application/json\" -X GET ${route}/ws/${app}/1").trim()
            // def expected = '{"id":1,"title":"my-task","ownerName":"${app}"}'
            
            // echo "check = ${check}"
            // echo "expected = ${expected}"
            
            // assert check == expected : "Build failed because check:\n${check}\n\ndid not equal\n${expected}"
            
            // sh "curl -i -u '${app}:redhat1' -X DELETE ${route}/ws/${app}/1"
          }

          // Copy Image to Nexus Docker Registry
          stage('Copy Image to Nexus Docker Registry') {
            echo "Copy image to Nexus Docker Registry"
            sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --screds=openshift:${token}  --dcreds=admin:admin123 docker://docker-registry.default.svc.cluster.local:5000/${GUID}-parks-dev/${app}:${devTag} docker://nexus-registry-${GUID}-nexus.apps.${CLUSTER}/${GUID}-parks-dev/${app}:${devTag}"
          }

          def destApp   = "${app}-green"
          def activeApp = "${app}-blue"

          stage('Blue/Green Production Deployment') {
            // destApp = sh(returnStdout: true, script: "oc get route ${app} --template='{{ .spec.to.name }}' -n ${GUID}-${app}-prod").trim()
            // activeApp = "${app}-blue"
            
            // // note that we want the *inactive* one
            // if (destApp == "${app}-blue"){
            //     activeApp = "${app}-green"
            // } else if (destApp =="${app}-green") {
            //     activeApp = "${app}-blue"
            // } else{
            //     echo destApp
            // }
            
            // sh "oc delete configmap ${activeApp}-config -n ${GUID}-${app}-prod --ignore-not-found"
            // sh "oc create configmap ${activeApp}-config --from-file=./configuration/application-users.properties --from-file=./configuration/application-roles.properties -n ${GUID}-${app}-prod"
            // sh "oc set image dc/${activeApp} ${activeApp}=docker-registry.default.svc:5000/${GUID}-parks-dev/${app}:${devTag} -n ${GUID}-${app}-prod"
            
            // openshiftDeploy apiURL: masterURL
            //       , authToken: token
            //       , depCfg: activeApp
            //       , namespace: '${GUID}-${app}-prod'

            // openshiftVerifyDeployment apiURL: masterURL
            //       , authToken: token
            //       , depCfg: activeApp
            //       , namespace: '${GUID}-${app}-prod' // FIXME: correct namespace
            //       , replicaCount: '1'
            //       , verbose: 'false'
            //       , verifyReplicaCount: 'true'

            // openshiftVerifyService apiURL: masterURL
            //       , authToken: token
            //       , namespace: '${GUID}-${app}-prod' // FIXME: correct namespace
            //       , svcName: activeApp
            //       , verbose: 'false'
            
          }

          stage('Switch over to new Version') {
            
            // No pause for confirmation here; we want full automation

            // echo "Switching Production application to ${destApp}."
            // sh "oc set route-backends ${app} ${activeApp}=1 ${destApp}=0 -n ${GUID}-${app}-prod"
          }
    }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
